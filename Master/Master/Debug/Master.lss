
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  0000064c  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000164a  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093d  00000000  00000000  00001ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a01  00000000  00000000  0000280f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a2  00000000  00000000  000033d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b74  00000000  00000000  0000397a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000044ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  7a:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_init>:
 */ 

#include"DIO.h"
void DIO_init(PORT_NUMBER PORTN,PIN_NUMBER PINN,PIN_CFG PIN_CFG_TYPE)
{
	if (PIN_CFG_TYPE==OUTPUT)
  82:	41 30       	cpi	r20, 0x01	; 1
  84:	a1 f5       	brne	.+104    	; 0xee <DIO_init+0x6c>
	{
		switch (PORTN)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_init+0x2a>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_init+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_init+0x40>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_init+0x56>
  94:	08 95       	ret
		{
			case DIO_PORTA:
			SetBIT(PORTA_IO,PINN);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_init+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_init+0x1c>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
			break;
  aa:	08 95       	ret
			case DIO_PORTB:
			SetBIT(PORTB_IO,PINN);
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_init+0x36>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_init+0x32>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
			break;
  c0:	08 95       	ret
			case DIO_PORTC:
			SetBIT(PORTC_IO,PINN);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_init+0x4c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_init+0x48>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
			break;
  d6:	08 95       	ret
			case DIO_PORTD:
			SetBIT(PORTD_IO,PINN);
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_init+0x62>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_init+0x5e>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
			break;
  ec:	08 95       	ret
			default:
			break;
			
		}
	}
	else if (PIN_CFG_TYPE==INPUT)
  ee:	41 11       	cpse	r20, r1
  f0:	37 c0       	rjmp	.+110    	; 0x160 <DIO_init+0xde>
	{
		switch (PORTN)
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <DIO_init+0x98>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_init+0x80>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	d9 f0       	breq	.+54     	; 0x132 <DIO_init+0xb0>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	29 f1       	breq	.+74     	; 0x14a <DIO_init+0xc8>
 100:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBIT(PORTA_IO,PINN);
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_init+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_init+0x88>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	8a bb       	out	0x1a, r24	; 26
			break;
 118:	08 95       	ret
			case DIO_PORTB:
			ClearBIT(PORTB_IO,PINN);
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_init+0xa4>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_init+0xa0>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
			break;
 130:	08 95       	ret
			case DIO_PORTC:
			ClearBIT(PORTC_IO,PINN);
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_init+0xbc>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_init+0xb8>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	84 bb       	out	0x14, r24	; 20
			break;
 148:	08 95       	ret
			case DIO_PORTD:
			ClearBIT(PORTD_IO,PINN);
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_init+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_init+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_init_PORT>:
		}
	}
}
void DIO_init_PORT(PORT_NUMBER PORTNUMMER,PIN_CFG PIN_CFG_NUMBER_DUPP)
{
	if (PIN_CFG_NUMBER_DUPP==OUTPUT)
 162:	61 30       	cpi	r22, 0x01	; 1
 164:	a1 f4       	brne	.+40     	; 0x18e <DIO_init_PORT+0x2c>
	{
		switch (PORTNUMMER)
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	49 f0       	breq	.+18     	; 0x17c <DIO_init_PORT+0x1a>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_init_PORT+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	49 f0       	breq	.+18     	; 0x182 <DIO_init_PORT+0x20>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	51 f0       	breq	.+20     	; 0x188 <DIO_init_PORT+0x26>
 174:	08 95       	ret
		{
			case DIO_PORTA:
			PORTA_IO=0XFF;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	8a bb       	out	0x1a, r24	; 26
			break;
 17a:	08 95       	ret
			case DIO_PORTB:
			PORTB_IO=0XFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	87 bb       	out	0x17, r24	; 23
			break;
 180:	08 95       	ret
			case DIO_PORTC:
			PORTC_IO=0XFF;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	84 bb       	out	0x14, r24	; 20
			break;
 186:	08 95       	ret
			case DIO_PORTD:
			PORTD_IO=0XFF;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	81 bb       	out	0x11, r24	; 17
			break;
 18c:	08 95       	ret
			default:
			break;
			
		}
	}
	else if (PIN_CFG_NUMBER_DUPP==INPUT)
 18e:	61 11       	cpse	r22, r1
 190:	0f c0       	rjmp	.+30     	; 0x1b0 <DIO_init_PORT+0x4e>
	{
		switch (PORTNUMMER)
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	41 f0       	breq	.+16     	; 0x1a6 <DIO_init_PORT+0x44>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <DIO_init_PORT+0x40>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	39 f0       	breq	.+14     	; 0x1aa <DIO_init_PORT+0x48>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	39 f0       	breq	.+14     	; 0x1ae <DIO_init_PORT+0x4c>
 1a0:	08 95       	ret
		{
			case DIO_PORTA:
			PORTA_IO=0X00;
 1a2:	1a ba       	out	0x1a, r1	; 26
			break;
 1a4:	08 95       	ret
			case DIO_PORTB:
			PORTB_IO=0X00;
 1a6:	17 ba       	out	0x17, r1	; 23
			break;
 1a8:	08 95       	ret
			case DIO_PORTC:
			PORTC_IO=0X00;
 1aa:	14 ba       	out	0x14, r1	; 20
			break;
 1ac:	08 95       	ret
			case DIO_PORTD:
			PORTD_IO=0X00;
 1ae:	11 ba       	out	0x11, r1	; 17
 1b0:	08 95       	ret

000001b2 <DIO_WRITE>:
		}
	}
}
void DIO_WRITE (PORT_NUMBER PORTNUM,PIN_NUMBER PINNUM,PIN_STATUS PINSTAT)
{
	switch(PORTNUM){
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	11 f1       	breq	.+68     	; 0x1fa <DIO_WRITE+0x48>
 1b6:	30 f0       	brcs	.+12     	; 0x1c4 <DIO_WRITE+0x12>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	d1 f1       	breq	.+116    	; 0x230 <DIO_WRITE+0x7e>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_WRITE+0x10>
 1c0:	52 c0       	rjmp	.+164    	; 0x266 <DIO_WRITE+0xb4>
 1c2:	08 95       	ret
		case DIO_PORTA:
		if (PINSTAT==HIGH)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_WRITE+0x2c>
		{
			SetBIT(PORTA_REG,PINNUM);
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_WRITE+0x22>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_WRITE+0x1e>
 1d8:	82 2b       	or	r24, r18
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	08 95       	ret
		}
		else if(PINSTAT==LOW)
 1de:	41 11       	cpse	r20, r1
 1e0:	5c c0       	rjmp	.+184    	; 0x29a <DIO_WRITE+0xe8>
		{
			ClearBIT(PORTA_REG,PINNUM);
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_WRITE+0x3c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_WRITE+0x38>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret
		}
		break;
		case DIO_PORTB:
		if (PINSTAT==HIGH)
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <DIO_WRITE+0x62>
		{
			SetBIT(PORTB_REG,PINNUM);
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WRITE+0x58>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WRITE+0x54>
 20e:	82 2b       	or	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
		}
		else if(PINSTAT==LOW)
 214:	41 11       	cpse	r20, r1
 216:	41 c0       	rjmp	.+130    	; 0x29a <DIO_WRITE+0xe8>
		{
			ClearBIT(PORTB_REG,PINNUM);
 218:	28 b3       	in	r18, 0x18	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_WRITE+0x72>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_WRITE+0x6e>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	08 95       	ret
		}
		break;
		case DIO_PORTC:
		if (PINSTAT==HIGH)
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	59 f4       	brne	.+22     	; 0x24a <DIO_WRITE+0x98>
		{
			SetBIT(PORTC_REG,PINNUM);
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WRITE+0x8e>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WRITE+0x8a>
 244:	82 2b       	or	r24, r18
 246:	85 bb       	out	0x15, r24	; 21
 248:	08 95       	ret
		}
		else if(PINSTAT==LOW)
 24a:	41 11       	cpse	r20, r1
 24c:	26 c0       	rjmp	.+76     	; 0x29a <DIO_WRITE+0xe8>
		{
			ClearBIT(PORTC_REG,PINNUM);
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_WRITE+0xa8>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_WRITE+0xa4>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	85 bb       	out	0x15, r24	; 21
 264:	08 95       	ret
		}
		break;
		case DIO_PORTD:
		if (PINSTAT==HIGH)
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	59 f4       	brne	.+22     	; 0x280 <DIO_WRITE+0xce>
		{
			SetBIT(PORTD_REG,PINNUM);
 26a:	22 b3       	in	r18, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_WRITE+0xc4>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_WRITE+0xc0>
 27a:	82 2b       	or	r24, r18
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret
		}
		else if(PINSTAT==LOW)
 280:	41 11       	cpse	r20, r1
 282:	0b c0       	rjmp	.+22     	; 0x29a <DIO_WRITE+0xe8>
		{
			ClearBIT(PORTD_REG,PINNUM);
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_WRITE+0xde>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_WRITE+0xda>
 294:	80 95       	com	r24
 296:	82 23       	and	r24, r18
 298:	82 bb       	out	0x12, r24	; 18
 29a:	08 95       	ret

0000029c <DIO_WRITE_DATA>:
		break;
	}
}
void DIO_WRITE_DATA(PORT_NUMBER PORTNUMERO,Uint8 data_port)
{
	switch(PORTNUMERO)
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	41 f0       	breq	.+16     	; 0x2b0 <DIO_WRITE_DATA+0x14>
 2a0:	28 f0       	brcs	.+10     	; 0x2ac <DIO_WRITE_DATA+0x10>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	39 f0       	breq	.+14     	; 0x2b4 <DIO_WRITE_DATA+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <DIO_WRITE_DATA+0x1c>
 2aa:	08 95       	ret
	{
		case DIO_PORTA:
		PORTA_REG=data_port;
 2ac:	6b bb       	out	0x1b, r22	; 27
		break;
 2ae:	08 95       	ret
		case DIO_PORTB:
		PORTB_REG=data_port;
 2b0:	68 bb       	out	0x18, r22	; 24
		break;
 2b2:	08 95       	ret
		case DIO_PORTC:
		PORTC_REG=data_port;
 2b4:	65 bb       	out	0x15, r22	; 21
		break;
 2b6:	08 95       	ret
		case DIO_PORTD:
		PORTD_REG=data_port;
 2b8:	62 bb       	out	0x12, r22	; 18
 2ba:	08 95       	ret

000002bc <LCD_CMD>:
	LCD_CMD(0x01); //clear lcd
	_delay_ms(2);
	
}
void LCD_CMD (Uint8 cmd)
{
 2bc:	cf 93       	push	r28
 2be:	c8 2f       	mov	r28, r24
	//sending high nipple 3
	Uint8 sendcmd=(LCD_CMD_REG &(0x0F))|((0xF0)&(cmd));
	DIO_WRITE_DATA(LCD_CMD_REG,sendcmd);
 2c0:	68 2f       	mov	r22, r24
 2c2:	60 7f       	andi	r22, 0xF0	; 240
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_WRITE_DATA>
	DIO_WRITE(LCD_Init_REG,LCD_RS,LOW);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
	DIO_WRITE(LCD_Init_REG,LCD_EN,HIGH);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	80 e7       	ldi	r24, 0x70	; 112
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <LCD_CMD+0x28>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_CMD+0x32>
 2ee:	00 00       	nop
	_delay_ms(50);
	DIO_WRITE(LCD_Init_REG,LCD_EN,LOW);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 2fa:	8f e1       	ldi	r24, 0x1F	; 31
 2fc:	9e e4       	ldi	r25, 0x4E	; 78
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_CMD+0x42>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_CMD+0x48>
 304:	00 00       	nop
	_delay_ms(5);
	//sending low nipple 3
	sendcmd=(LCD_CMD_REG &(0x0F))|(cmd<<4);
	DIO_WRITE_DATA(LCD_CMD_REG,sendcmd);
 306:	6c 2f       	mov	r22, r28
 308:	62 95       	swap	r22
 30a:	60 7f       	andi	r22, 0xF0	; 240
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_WRITE_DATA>
	DIO_WRITE(LCD_Init_REG,LCD_RS,LOW);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
	DIO_WRITE(LCD_Init_REG,LCD_EN,HIGH);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 326:	9f ef       	ldi	r25, 0xFF	; 255
 328:	20 e7       	ldi	r18, 0x70	; 112
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	91 50       	subi	r25, 0x01	; 1
 32e:	20 40       	sbci	r18, 0x00	; 0
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <LCD_CMD+0x70>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_CMD+0x7a>
 336:	00 00       	nop
	_delay_ms(50);
	DIO_WRITE(LCD_Init_REG,LCD_EN,LOW);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 342:	8f e3       	ldi	r24, 0x3F	; 63
 344:	9f e1       	ldi	r25, 0x1F	; 31
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_CMD+0x8a>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_CMD+0x90>
 34c:	00 00       	nop
	_delay_ms(2);
}
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <LCD_Init>:
#include "DIO.h"
#define F_CPU 16000000UL
#include <util/delay.h>
void LCD_Init(void)
{
	DIO_init(LCD_Init_REG,LCD_RW,OUTPUT);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(LCD_Init_REG,LCD_RS,OUTPUT);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(LCD_Init_REG,LCD_EN,OUTPUT);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init_PORT(LCD_CMD_REG,OUTPUT);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_init_PORT>
	DIO_WRITE(LCD_Init_REG,LCD_RW,LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 382:	2f e7       	ldi	r18, 0x7F	; 127
 384:	88 e3       	ldi	r24, 0x38	; 56
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	21 50       	subi	r18, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <LCD_Init+0x36>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_Init+0x40>
 392:	00 00       	nop
	_delay_ms(25);
	LCD_CMD(0x33);
 394:	83 e3       	ldi	r24, 0x33	; 51
 396:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	8f e1       	ldi	r24, 0x1F	; 31
 39c:	93 e0       	ldi	r25, 0x03	; 3
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_Init+0x4c>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_Init+0x52>
 3a4:	00 00       	nop
	_delay_us(200);
	LCD_CMD(0x32);
 3a6:	82 e3       	ldi	r24, 0x32	; 50
 3a8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
	LCD_CMD(0x28); //set function
 3ac:	88 e2       	ldi	r24, 0x28	; 40
 3ae:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
	LCD_CMD(0x06); //entry mode
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
	LCD_CMD(0x0C); //display on
 3b8:	8c e0       	ldi	r24, 0x0C	; 12
 3ba:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
	LCD_CMD(0x01); //clear lcd
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	8f e3       	ldi	r24, 0x3F	; 63
 3c6:	9f e1       	ldi	r25, 0x1F	; 31
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_Init+0x76>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_Init+0x7c>
 3ce:	00 00       	nop
 3d0:	08 95       	ret

000003d2 <LCD_char>:
	_delay_ms(50);
	DIO_WRITE(LCD_Init_REG,LCD_EN,LOW);
	_delay_ms(2);
}
void LCD_char(Uint8 data)
{
 3d2:	cf 93       	push	r28
 3d4:	c8 2f       	mov	r28, r24
	//sending high nipple 3
	Uint8 sendcmd=(LCD_CMD_REG &(0x0F))|((0xF0)&(data));
	DIO_WRITE_DATA(LCD_CMD_REG,sendcmd);
 3d6:	68 2f       	mov	r22, r24
 3d8:	60 7f       	andi	r22, 0xF0	; 240
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_WRITE_DATA>
	DIO_WRITE(LCD_Init_REG,LCD_RS,HIGH);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
	DIO_WRITE(LCD_Init_REG,LCD_EN,HIGH);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	80 e7       	ldi	r24, 0x70	; 112
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <LCD_char+0x28>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms(50);
	DIO_WRITE(LCD_Init_REG,LCD_EN,LOW);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	63 e0       	ldi	r22, 0x03	; 3
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 410:	8f e1       	ldi	r24, 0x1F	; 31
 412:	9e e4       	ldi	r25, 0x4E	; 78
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
	_delay_ms(5);
	//sending low nipple 3
	sendcmd=(LCD_CMD_REG &(0x0F))|(data<<4);
	DIO_WRITE_DATA(LCD_CMD_REG,sendcmd);
 41c:	6c 2f       	mov	r22, r28
 41e:	62 95       	swap	r22
 420:	60 7f       	andi	r22, 0xF0	; 240
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_WRITE_DATA>
	DIO_WRITE(LCD_Init_REG,LCD_RS,HIGH);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
	DIO_WRITE(LCD_Init_REG,LCD_EN,HIGH);
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	63 e0       	ldi	r22, 0x03	; 3
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 43c:	9f ef       	ldi	r25, 0xFF	; 255
 43e:	20 e7       	ldi	r18, 0x70	; 112
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	91 50       	subi	r25, 0x01	; 1
 444:	20 40       	sbci	r18, 0x00	; 0
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
	_delay_ms(50);
	DIO_WRITE(LCD_Init_REG,LCD_EN,LOW);
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_WRITE>
 458:	8f e3       	ldi	r24, 0x3F	; 63
 45a:	9f e1       	ldi	r25, 0x1F	; 31
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 462:	00 00       	nop
	_delay_ms(2);
	
}
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <LCD_String>:
void LCD_String(char* data)
{
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	fc 01       	movw	r30, r24
	Uint8 count=0;
	while(data[count] !='\0')
 470:	80 81       	ld	r24, Z
 472:	88 23       	and	r24, r24
 474:	59 f0       	breq	.+22     	; 0x48c <LCD_String+0x24>
 476:	8f 01       	movw	r16, r30
 478:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_char(data[count]);
 47a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_char>
		++count;
 47e:	cf 5f       	subi	r28, 0xFF	; 255
	
}
void LCD_String(char* data)
{
	Uint8 count=0;
	while(data[count] !='\0')
 480:	f8 01       	movw	r30, r16
 482:	ec 0f       	add	r30, r28
 484:	f1 1d       	adc	r31, r1
 486:	80 81       	ld	r24, Z
 488:	81 11       	cpse	r24, r1
 48a:	f7 cf       	rjmp	.-18     	; 0x47a <LCD_String+0x12>
	{
		LCD_char(data[count]);
		++count;
	}
	
}
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <LCD_StartPOS>:
void LCD_StartPOS(Uint8 line,Uint8 pos){
	Uint8 SendCmd;
	switch(line){
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	19 f0       	breq	.+6      	; 0x49e <LCD_StartPOS+0xa>
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	39 f0       	breq	.+14     	; 0x4aa <LCD_StartPOS+0x16>
 49c:	08 95       	ret
		case 1:
		SendCmd = 0x80 | (pos & 0x0F);//ff ---> 0f|0x80 ---> 0x8f
		LCD_CMD(SendCmd);
 49e:	86 2f       	mov	r24, r22
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	80 68       	ori	r24, 0x80	; 128
 4a4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
		break;
 4a8:	08 95       	ret
		case 2:
		SendCmd = 0xC0 | (pos & 0x0F);
		LCD_CMD(SendCmd);
 4aa:	86 2f       	mov	r24, r22
 4ac:	8f 70       	andi	r24, 0x0F	; 15
 4ae:	80 6c       	ori	r24, 0xC0	; 192
 4b0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
 4b4:	08 95       	ret

000004b6 <main>:
#include "SPI.h"
#include "Uart.h"
#include "LCD.h"
int main(void)
{
	UART_Init();
 4b6:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Init>
	SPI_Init();
 4ba:	0e 94 01 03 	call	0x602	; 0x602 <SPI_Init>
	LCD_Init();
 4be:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_Init>
	PORTB &=~(1<<4);
 4c2:	c4 98       	cbi	0x18, 4	; 24
	/* Replace with your application code */
	while (1)
	{
		LCD_String("Amr Smart Home");
 4c4:	80 e6       	ldi	r24, 0x60	; 96
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 34 02 	call	0x468	; 0x468 <LCD_String>
 4cc:	2f ef       	ldi	r18, 0xFF	; 255
 4ce:	89 e6       	ldi	r24, 0x69	; 105
 4d0:	98 e1       	ldi	r25, 0x18	; 24
 4d2:	21 50       	subi	r18, 0x01	; 1
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	90 40       	sbci	r25, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <main+0x1c>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <main+0x26>
 4dc:	00 00       	nop
		_delay_ms(500);
		LCD_CMD(0x01);
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
		if (UART_Recieve()=='1')
 4e4:	0e 94 20 03 	call	0x640	; 0x640 <UART_Recieve>
 4e8:	81 33       	cpi	r24, 0x31	; 49
 4ea:	b1 f4       	brne	.+44     	; 0x518 <main+0x62>
		{
			SPI_Write('1');
 4ec:	0e 94 0a 03 	call	0x614	; 0x614 <SPI_Write>
			LCD_StartPOS(0,0);
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_StartPOS>
			LCD_String("LEDs are ON");
 4f8:	8f e6       	ldi	r24, 0x6F	; 111
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 34 02 	call	0x468	; 0x468 <LCD_String>
 500:	2f ef       	ldi	r18, 0xFF	; 255
 502:	89 e6       	ldi	r24, 0x69	; 105
 504:	98 e1       	ldi	r25, 0x18	; 24
 506:	21 50       	subi	r18, 0x01	; 1
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	90 40       	sbci	r25, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <main+0x50>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <main+0x5a>
 510:	00 00       	nop
			_delay_ms(500);
			LCD_CMD(0x01);
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
			
		}
		if (UART_Recieve()=='2')
 518:	0e 94 20 03 	call	0x640	; 0x640 <UART_Recieve>
 51c:	82 33       	cpi	r24, 0x32	; 50
 51e:	b1 f4       	brne	.+44     	; 0x54c <main+0x96>
		{
			SPI_Write('2');
 520:	0e 94 0a 03 	call	0x614	; 0x614 <SPI_Write>
			LCD_StartPOS(0,0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_StartPOS>
			LCD_String("LEDs are OFF");
 52c:	8b e7       	ldi	r24, 0x7B	; 123
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 34 02 	call	0x468	; 0x468 <LCD_String>
 534:	2f ef       	ldi	r18, 0xFF	; 255
 536:	89 e6       	ldi	r24, 0x69	; 105
 538:	98 e1       	ldi	r25, 0x18	; 24
 53a:	21 50       	subi	r18, 0x01	; 1
 53c:	80 40       	sbci	r24, 0x00	; 0
 53e:	90 40       	sbci	r25, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <main+0x84>
 542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x8e>
 544:	00 00       	nop
			_delay_ms(500);
			LCD_CMD(0x01);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
		}
		if (UART_Recieve()=='3')
 54c:	0e 94 20 03 	call	0x640	; 0x640 <UART_Recieve>
 550:	83 33       	cpi	r24, 0x33	; 51
 552:	f9 f4       	brne	.+62     	; 0x592 <main+0xdc>
		{
			SPI_Write('3');
 554:	0e 94 0a 03 	call	0x614	; 0x614 <SPI_Write>
			LCD_StartPOS(0,0);
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_StartPOS>
			LCD_String("Reading Temp.");
 560:	88 e8       	ldi	r24, 0x88	; 136
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 34 02 	call	0x468	; 0x468 <LCD_String>
 568:	2f ef       	ldi	r18, 0xFF	; 255
 56a:	89 e6       	ldi	r24, 0x69	; 105
 56c:	98 e1       	ldi	r25, 0x18	; 24
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <main+0xb8>
 576:	00 c0       	rjmp	.+0      	; 0x578 <main+0xc2>
 578:	00 00       	nop
			_delay_ms(500);
			LCD_CMD(0x01);
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	89 e6       	ldi	r24, 0x69	; 105
 584:	98 e1       	ldi	r25, 0x18	; 24
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <main+0xd0>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0xda>
 590:	00 00       	nop
			_delay_ms(500);
		}
		if (UART_Recieve()=='+')
 592:	0e 94 20 03 	call	0x640	; 0x640 <UART_Recieve>
 596:	8b 32       	cpi	r24, 0x2B	; 43
 598:	b1 f4       	brne	.+44     	; 0x5c6 <main+0x110>
		{
			SPI_Write('+');
 59a:	0e 94 0a 03 	call	0x614	; 0x614 <SPI_Write>
			LCD_StartPOS(0,0);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_StartPOS>
			LCD_String("Motor is hig.");
 5a6:	86 e9       	ldi	r24, 0x96	; 150
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 34 02 	call	0x468	; 0x468 <LCD_String>
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	89 e6       	ldi	r24, 0x69	; 105
 5b2:	98 e1       	ldi	r25, 0x18	; 24
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0xfe>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <main+0x108>
 5be:	00 00       	nop
			_delay_ms(500);
			LCD_CMD(0x01);
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
		}
		if (UART_Recieve()=='-')
 5c6:	0e 94 20 03 	call	0x640	; 0x640 <UART_Recieve>
 5ca:	8d 32       	cpi	r24, 0x2D	; 45
 5cc:	09 f0       	breq	.+2      	; 0x5d0 <main+0x11a>
 5ce:	7a cf       	rjmp	.-268    	; 0x4c4 <main+0xe>
		{
			SPI_Write('-');
 5d0:	0e 94 0a 03 	call	0x614	; 0x614 <SPI_Write>
			LCD_StartPOS(0,0);
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_StartPOS>
			LCD_String("Motor is slo.");
 5dc:	84 ea       	ldi	r24, 0xA4	; 164
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 34 02 	call	0x468	; 0x468 <LCD_String>
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	89 e6       	ldi	r24, 0x69	; 105
 5e8:	98 e1       	ldi	r25, 0x18	; 24
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x134>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <main+0x13e>
 5f4:	00 00       	nop
			_delay_ms(500);
			LCD_CMD(0x01);
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CMD>
return (0);
		}
	}
}
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	08 95       	ret

00000602 <SPI_Init>:

#include "SPI.h"
#include <avr/io.h>
void SPI_Init()					
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);	
 602:	87 b3       	in	r24, 0x17	; 23
 604:	80 6b       	ori	r24, 0xB0	; 176
 606:	87 bb       	out	0x17, r24	; 23
						
	DDRB &= ~(1<<MISO);			
 608:	be 98       	cbi	0x17, 6	; 23
						
	PORTB |= (1<<SS);			
 60a:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	
 60c:	81 e5       	ldi	r24, 0x51	; 81
 60e:	8d b9       	out	0x0d, r24	; 13
						
	SPSR &= ~(1<<SPI2X);			
 610:	70 98       	cbi	0x0e, 0	; 14
 612:	08 95       	ret

00000614 <SPI_Write>:
}
void SPI_Write(char data)		
{
	SPDR = data;			
 614:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	
 616:	77 9b       	sbis	0x0e, 7	; 14
 618:	fe cf       	rjmp	.-4      	; 0x616 <SPI_Write+0x2>
			
}
 61a:	08 95       	ret

0000061c <UART_Init>:
	CLearBIT(UART_CTRSTATReg_C,Reg_Select);
	UART_CTRSTATReg_C=(MyUBBR>>8);
}
void UART_Send( unsigned char data){
	while(!(UART_CTRSTATReg_A &(1<<UART_DataReg_EM)));
	UART_DataReg =data;
 61c:	53 9a       	sbi	0x0a, 3	; 10
 61e:	54 9a       	sbi	0x0a, 4	; 10
 620:	80 b5       	in	r24, 0x20	; 32
 622:	80 68       	ori	r24, 0x80	; 128
 624:	80 bd       	out	0x20, r24	; 32
 626:	80 b5       	in	r24, 0x20	; 32
 628:	84 60       	ori	r24, 0x04	; 4
 62a:	80 bd       	out	0x20, r24	; 32
 62c:	80 b5       	in	r24, 0x20	; 32
 62e:	82 60       	ori	r24, 0x02	; 2
 630:	80 bd       	out	0x20, r24	; 32
 632:	87 e6       	ldi	r24, 0x67	; 103
 634:	89 b9       	out	0x09, r24	; 9
 636:	80 b5       	in	r24, 0x20	; 32
 638:	8f 77       	andi	r24, 0x7F	; 127
 63a:	80 bd       	out	0x20, r24	; 32
 63c:	10 bc       	out	0x20, r1	; 32
 63e:	08 95       	ret

00000640 <UART_Recieve>:
}
unsigned char UART_Recieve(void){
	while(!(UART_CTRSTATReg_A &(1<<UART_Recomp)));
 640:	5f 9b       	sbis	0x0b, 7	; 11
 642:	fe cf       	rjmp	.-4      	; 0x640 <UART_Recieve>
	return UART_DataReg;
 644:	8c b1       	in	r24, 0x0c	; 12
}
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
